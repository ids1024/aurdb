#!/usr/bin/python3

import AUR
import AUR.PkgList
import urllib.request
import io
import sqlite3
import os
import argparse

pkglisturl = "https://aur.archlinux.org/packages.gz"
dbpath = os.path.expanduser("~/.aurdb.db")
fields = ('Depends', 'Provides', 'Name', 'URL', 'Maintainer', 'URLPath', 'MakeDepends', 'Replaces', 'PackageBaseID', 'OptDepends', 'License', 'OutOfDate', 'FirstSubmitted', 'CategoryID', 'CheckDepends', 'Conflicts', 'Description', 'NumVotes', 'Groups', 'LastModified', 'ID', 'PackageBase', 'Version')
sqlfields = "Depends TEXT, Provides TEXT, Name TEXT PRIMARY KEY, URL TEXT, Maintainer TEXT, URLPath TEXT, MakeDepends TEXT, Replaces TEXT, PackageBaseID INT, OptDepends TEXT, License TEXT, OutOfDate INT, FirstSubmitted INT, CategoryID INT, CheckDepends TEXT, Conflicts, Description TEXT, NumVotes INT, Groups, LastModified INT, ID INT, PackageBase TEXT, Version TEXT"

REPOCOLOR='\x1b[1;35m'
PKGCOLOR='\x1b[1;39m'
VERCOLOR='\x1b[1;32m'
FLAGCOLOR='\x1b[1;31m'
RESETCOLOR='\x1b[0m'


#http://stackoverflow.com/questions/312443/how-do-you-split-a-list-into-evenly-sized-chunks-in-python
def chunks(l, n):
    """ Yield successive n-sized chunks from l.
    """
    for i in range(0, len(l), n):
        yield l[i:i+n]


aur = AUR.RPC.AUR()

parser = argparse.ArgumentParser(description='Store AUR data locally')
parser.add_argument('-u', '--update', action='store_true')
args = parser.parse_args()

if args.update: 
    packages = list(AUR.PkgList.PkgList())

    if os.path.exists(dbpath+'.tmp'):
        os.remove(dbpath+'.tmp')
    con = sqlite3.connect(dbpath+'.tmp')
    cur = con.cursor()    

    cur.execute("CREATE TABLE packages("+sqlfields+")")

    for chunk in chunks(packages, 150): 
        for pkg in aur.info(chunk):
            l = ['' if i not in pkg else ','.join(pkg[i])
                    if isinstance(pkg[i],list) else pkg[i] for i in fields]
            cur.execute("INSERT INTO packages VALUES (?"+22*',?'+")", l)
            con.commit()
    
    con.close()
    os.rename(dbpath+'.tmp', dbpath)



else: 
    con = sqlite3.connect(dbpath)
    cur = con.cursor()    

    cur.execute("SELECT * FROM packages ORDER BY Name")
    for pkg in cur.fetchall():
        d = dict(zip(fields, pkg))

        vercolor = VERCOLOR
        if d["OutOfDate"]:
            vercolor = FLAGCOLOR

        print("%saur/%s%s %s%s %s(%d)\n\t%s" % (REPOCOLOR, PKGCOLOR, d["Name"], vercolor, d["Version"], RESETCOLOR, d["NumVotes"], d["Description"]))

    con.close()

